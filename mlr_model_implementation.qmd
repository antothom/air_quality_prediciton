---
title: "Multiple Linear Regression Model Implementation"
author: "Antoine Thomas"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

```{r}
load("airquality_data_by_station.RData")
```

# Preparation of the model creation

In order to keep the model building process as manageable as possible, several functions are first created. These are used to create different models based on given variables, and to create response and residual plots. After that, only the functions that have been created need to be called for the actual model building.

### Functions for creating response and residual plot

The `create_resp_plot` function is intended to create a response plot based on a model and its predictions for a given test data set. The `create_residual_plot` function is intended to create a residual plot based on a model and its predictions for a given test data set.

```{r plotting functions}

# Function creating response plot based on predicted and actual Y values
create_resp_plot <- function(df) {
  station_name <- df$Station[[1]]
  
  df %>%
    ggplot(aes(x = aqi_index_pred, y = O3)) +
    geom_point(alpha = .1) +
    geom_smooth(method = "lm") +
    theme_bw() +
    xlim(c(0,105)) +
    ylim(c(0,105)) +
    labs(title = "Response Plot", 
         subtitle = paste0("Station: ", station_name),
         x = "FIT",
         y = "Y") +
    theme(plot.title = element_text(face = "bold"))
}

# Function creating residual plot based on predicted and actual Y values
create_residual_plot <- function(df) {
  station_name <- df$Station[[1]]
  
  df %>%
    ggplot(aes(x = aqi_index_pred, y = aqi_index_pred-caqi_index)) +
    geom_point(alpha = .1) +
    theme_bw() +
    labs(title = "Residual Plot", 
         subtitle = paste0("Station: ", station_name),
         x = "FIT",
         y = "RES") +
    xlim(c(0,105)) +
    ylim(c(-50,50)) +
    theme(plot.title = element_text(face = "bold"))
}
```

### Functions for creating linear regression models

The `create_lm` function is used to create a linear model based on a training data set and two other parameters. These are `dependent_var`, which specifies the name of the dependent variable, and `forecast`, which specifies whether the regression model should create a 3 hour forecast model or a pure prediction model based on weather and traffic data.

In addition, a data frame called `data_prepared` is created, which contains already split data for training and testing.

```{r model creation function}


# Function creating a linear regression model for a given dataframe and stationgroup
create_lm <- function(df, dependent_var) {
  
  
  dependent_vars <- c("pm25", "pm10", "NO2", "O3", "caqi_index")
  
  # Return NA if independent variable is not monitored at given Station
  if (sum(is.na(df[[dependent_var]]))/nrow(df) >= 0.5) {
    return(NA)
  }
  
  # Get stationgroup
  stationgroup <- as.character(df$stationgroups[[1]]) 
  
  # Remove all pollutant and aqi variables except for the dependent variable
  vars_to_remove <- dependent_vars[-which(dependent_vars %in% c(dependent_var))]

  # Remove independent variables which should not be considered in the model
  df <- df %>% select(
    -one_of(vars_to_remove),
    -date,
    -Station,
    -stationgroups,
    -caqi_type,
    -weekend,
    -precipitation,
    -winddirection_100m
  )
  
  # Create regression formula
  lm_formula <- as.formula(paste0(dependent_var, " ~ ."))
  
  # Create model
  model <- df %>%
    na.omit() %>%
    lm(formula = lm_formula, data = .)
  
  return(model)
}


create_lag_vars <- function(df, var) {
  lag_3 <- paste0(var, "_lag_3")
  lag_6 <- paste0(var, "_lag_6")
  df <- df %>%
    mutate(
      {{ lag_3 }} := lag(!!sym(var), 3),
      {{ lag_6 }} := lag(!!sym(var), 6)
    )
  return(df)
}

# Preparation of train and test data for predictions
data_prepared <- airquality_data_by_station %>%
  # Selection of training data (80%)
  mutate(train_df = map(messwerte, slice_head, prop=.8)) %>%
  # Selection of test data (20%)
  mutate(test_df = map2(.x = messwerte,.y = train_df, function(x,y) 
    x[!(x$date %in% y$date),]))


```

# Creation of Prediction Models

In the following sections, the CAQI index and the concentrations of respective pollutants are predicted using only weather data and, if applicable, traffic data with linear regression models.

### CAQI-Index - Prediction

Prediction of CAQI index values based on weather and traffic data

```{r caqi_index_prediction}

lm_caqi_index_pred <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "caqi_index")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(aqi_index_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$caqi_index - x$aqi_index_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$caqi_index - x$aqi_index_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))

lm_caqi_index_pred %>%
  select(Station, stationgroups, rmse, mae,r2)
```

### NO~2~ - Prediction

Prediction of NO~2~ values based on weather and traffic data

```{r NO2_prediction}

lm_no2_pred <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "NO2")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(NO2_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$NO2 - x$NO2_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$NO2 - x$NO2_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))

lm_no2_pred %>%
  select(Station, stationgroups, rmse, mae,r2)
```

### O~3~ - Prediction

Prediction of O~3~ values based on weather and traffic data

```{r O3_prediction}

lm_o3_pred <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "O3")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(O3_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$O3 - x$O3_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$O3 - x$O3_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))

  
lm_o3_pred %>%
  select(Station, stationgroups, rmse, mae,r2)
```


### PM~2.5~ - Prediction

Prediction of PM~2.5~ values based on weather and traffic data

```{r pm25_prediction}

lm_pm25_pred <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "pm25")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(pm25_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$pm25 - x$pm25_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$pm25 - x$pm25_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))
  
lm_pm25_pred %>%
  select(Station, stationgroups, rmse, mae,r2)
```

### PM~10~ - Prediction

Prediction of PM~10~ values based on weather and traffic data

```{r pm10_prediction}

lm_pm10_pred <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "pm10")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(pm10_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$pm10 - x$pm10_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$pm10 - x$pm10_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))
  
lm_pm10_pred %>%
  select(Station, stationgroups, rmse, mae,r2)
```


# Creation of Forecast Models

In the following sections, the CAQI index and the concentrations of respective pollutants are forecasted using weather data, if applicable, traffic data and lagged data of the dependent variables with linear regression models.

### CAQI-Index - Forecast

Forecast of CAQI index values based on weather, traffic data and 3h/6h lagged CAQI Index values

```{r caqi_index_forecast}

# Preparation of train and test data for predictions
data_prepared <- airquality_data_by_station %>%
  # Adding lagged variables
  mutate(messwerte = map(messwerte,create_lag_vars,"caqi_index")) %>%
  # Selection of training data (80%)
  mutate(train_df = map(messwerte, slice_head, prop=.8)) %>%
  # Selection of test data (20%)
  mutate(test_df = map2(.x = messwerte,.y = train_df, function(x,y) 
    x[!(x$date %in% y$date),]))

lm_caqi_index_forecast <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "caqi_index")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(aqi_index_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$caqi_index - x$aqi_index_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$caqi_index - x$aqi_index_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))

lm_caqi_index_forecast %>%
  select(Station, stationgroups, rmse, mae,r2)
```

### NO~2~ - Forecast

Forecast of NO~2~ values based on weather, traffic data and 3h/6h lagged NO2 values

```{r NO2_forecast}

# Preparation of train and test data for predictions
data_prepared <- airquality_data_by_station %>%
  # Adding lagged variables
  mutate(messwerte = map(messwerte,create_lag_vars,"NO2")) %>%
  # Selection of training data (80%)
  mutate(train_df = map(messwerte, slice_head, prop=.8)) %>%
  # Selection of test data (20%)
  mutate(test_df = map2(.x = messwerte,.y = train_df, function(x,y) 
    x[!(x$date %in% y$date),]))

lm_no2_forecast <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "NO2")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(NO2_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$NO2 - x$NO2_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$NO2 - x$NO2_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))

lm_no2_forecast %>%
  select(Station, stationgroups, rmse, mae,r2)
```

### O~3~ - Forecast

Forecast of O~3~ values based on weather, traffic data and 3h/6h lagged O3 values

```{r O3_forecast}

# Preparation of train and test data for predictions
data_prepared <- airquality_data_by_station %>%
  # Adding lagged variables
  mutate(messwerte = map(messwerte,create_lag_vars,"O3")) %>%
  # Selection of training data (80%)
  mutate(train_df = map(messwerte, slice_head, prop=.8)) %>%
  # Selection of test data (20%)
  mutate(test_df = map2(.x = messwerte,.y = train_df, function(x,y) 
    x[!(x$date %in% y$date),]))

lm_o3_forecast <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "O3")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(O3_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$O3 - x$O3_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$O3 - x$O3_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))

  
lm_o3_forecast %>%
  select(Station, stationgroups, rmse, mae,r2)
```


### PM~2.5~ - Forecast

Forecast of PM~2.5~ values based on weather, traffic data and 3h/6h lagged PM2.5 values

```{r pm25_forecast}

# Preparation of train and test data for predictions
data_prepared <- airquality_data_by_station %>%
  # Adding lagged variables
  mutate(messwerte = map(messwerte,create_lag_vars,"pm25")) %>%
  # Selection of training data (80%)
  mutate(train_df = map(messwerte, slice_head, prop=.8)) %>%
  # Selection of test data (20%)
  mutate(test_df = map2(.x = messwerte,.y = train_df, function(x,y) 
    x[!(x$date %in% y$date),]))

lm_pm25_forecast <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "pm25")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(pm25_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$pm25 - x$pm25_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$pm25 - x$pm25_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))
  
lm_pm25_forecast %>%
  select(Station, stationgroups, rmse, mae,r2)
```

### PM~10~ - Forecast

Forecast of PM~10~ values based on weather, traffic data and 3h/6h lagged PM10 values

```{r pm10_forecast}

# Preparation of train and test data for predictions
data_prepared <- airquality_data_by_station %>%
  # Adding lagged variables
  mutate(messwerte = map(messwerte,create_lag_vars,"pm10")) %>%
  # Selection of training data (80%)
  mutate(train_df = map(messwerte, slice_head, prop=.8)) %>%
  # Selection of test data (20%)
  mutate(test_df = map2(.x = messwerte,.y = train_df, function(x,y) 
    x[!(x$date %in% y$date),]))

lm_pm10_forecast <- data_prepared %>%
  # Creation of lm model for each station
  mutate(model_lm = map(.x = messwerte, .f = create_lm, "pm10")) %>%
  # Checking if the create_lm return is a list
  mutate(model_output = unlist(map(.x = model_lm, .f = typeof))) %>%
  filter(model_output == "list") %>%
  select(-model_output) %>%
  # Predicting dependent variable for test data
  mutate(test_pred = map2(.x = model_lm, .y = test_df, .f = function(x, y) {
    y %>% mutate(pm10_pred = predict(x, newdata = .))
  })) %>%
  # Computing RMSE for each model
  mutate(rmse = unlist(map(.x = test_pred, .f = function(x) {
    sqrt(mean((x$pm10 - x$pm10_pred)^2, na.rm = T))
  }))) %>%
  # Computing MAE for each model
  mutate(mae = unlist(map(.x = test_pred, .f = function(x) {
    mean(abs(x$pm10 - x$pm10_pred), na.rm = T)
  }))) %>%
  # Extracting R^2 Values
  mutate(r2 = unlist(map(model_lm, function(x) summary(x)[["r.squared"]])))
  

lm_pm10_forecast %>%
  select(Station, stationgroups, rmse, mae,r2)
```


```{r}
test <- lm_no2_pred %>%
  pull(model_lm) %>%
  .[[1]]

test[["terms"]][[2]]
test[["terms"]][[3]]
```


