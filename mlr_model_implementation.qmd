---
title: "Multiple Linear Regression Model Implementation"
execute:
  message: false
  warning: false
author: "Antoine Thomas"
date: 2023-08-03
format:
  html: 
    embed-resources: true
    code-tools:
      source: true
      toggle: true
      caption: "Show code"
editor: source
theme:
  light: flatly
  dark: darkly
---

```{r}
#| include: false
library(tidyverse)
library(gt)
```

```{r}
load("airquality_data_by_station.RData")
```

# Preparation of the model creation

In order to keep the model building process as manageable as possible, several functions are first created. These are used to create different models based on given variables, and to create response and residual plots. After that, only the functions that have been created need to be called for the actual model building.

### Functions for creating response and residual plot

The `create_resp_plot` function is intended to create a response plot based on a model and its predictions for a given test data set. The `create_residual_plot` function is intended to create a residual plot based on a model and its predictions for a given test data set.

```{r plotting functions}

# Function creating response plot based on predicted and actual Y values
create_resp_plot <- function(df) {
  station_name <- df$Station[[1]]

  df %>%
    ggplot(aes(x = aqi_index_pred, y = O3)) +
    geom_point(alpha = .1) +
    geom_smooth(method = "lm") +
    theme_bw() +
    xlim(c(0, 105)) +
    ylim(c(0, 105)) +
    labs(
      title = "Response Plot",
      subtitle = paste0("Station: ", station_name),
      x = "FIT",
      y = "Y"
    ) +
    theme(plot.title = element_text(face = "bold"))
}

# Function creating residual plot based on predicted and actual Y values
create_residual_plot <- function(df) {
  station_name <- df$Station[[1]]

  df %>%
    ggplot(aes(x = aqi_index_pred, y = aqi_index_pred - caqi_index)) +
    geom_point(alpha = .1) +
    theme_bw() +
    labs(
      title = "Residual Plot",
      subtitle = paste0("Station: ", station_name),
      x = "FIT",
      y = "RES"
    ) +
    xlim(c(0, 105)) +
    ylim(c(-50, 50)) +
    theme(plot.title = element_text(face = "bold"))
}
```

### Functions for creating linear regression models

The `create_lm` function is used to create a linear model based on a training data set and two other parameters. These are `dependent_var`, which specifies the name of the dependent variable, and `forecast`, which specifies whether the regression model should create a 3 hour forecast model or a pure prediction model based on weather and traffic data.

In addition, a data frame called `data_prepared` is created, which contains already split data for training and testing.



```{r model creation function}


# Function creating a linear regression model for a given dataframe and stationgroup
create_lm <- function(df, dependent_var, forecast = F, return_model = F) {
  # Create lagged variables in case forecase is true
  if (forecast == T) {
    lag_3_var_name <- paste0(dependent_var, "_lag_3")
    lag_6_var_name <- paste0(dependent_var, "_lag_6")
    df <- df %>%
      mutate(
        {{ lag_3_var_name }} := lag(!!sym(dependent_var), 3),
        {{ lag_6_var_name }} := lag(!!sym(dependent_var), 6)
      )
  }
  
  # Get stationgroup
  station_group <- as.character(df$stationgroups[[1]])
  # Get station name
  station_name <- as.character(df$Station[[1]])
  # Define possible dependent variables
  dependent_vars <- c("pm25", "pm10", "NO2", "O3", "caqi_index")
  # Remove all pollutant and aqi variables except for the dependent variable
  vars_to_remove <- dependent_vars[-which(dependent_vars %in% c(dependent_var))]



  # Return data frame full of NA if independent variable is not monitored at given Station
  if (sum(is.na(df[[dependent_var]])) / nrow(df) >= 0.5) {
    if (return_model == F) {
      model <- NA
    } else {
      model <- list(NA)
    }

    result <- tibble(
      Station = station_name,
      stationgroups = station_group,
      dependent_var = dependent_var,
      model_lm = model,
      rmse_train = NA,
      mae_train = NA,
      rmse_test = NA,
      mae_test = NA,
      train_data = list(NA),
      test_data = list(NA),
      var_relevance = list(NA)
    )
    return(result)
  }

  # Remove independent variables which should not be considered in the model
  lm_df <- df %>%
    select(
      -one_of(vars_to_remove),
      -caqi_type,
      -weekend,
      -precipitation,
      -winddirection_100m,
    ) %>%
    na.omit()

  # removing all unwanted variables
  lm_df_cl <- lm_df %>%
    select(
      -date,
      -Station,
      -stationgroups
    )

  # 80/20 training test split
  numberOfTrainingSamples <- round(nrow(lm_df) * .8)

  # training data
  train_data <- lm_df_cl[1:numberOfTrainingSamples, ]
  train_labels <- lm_df_cl[[dependent_var]][1:numberOfTrainingSamples]

  # testing data
  test_data <- lm_df_cl[-(1:numberOfTrainingSamples), ]
  test_labels <- lm_df_cl[[dependent_var]][-(1:numberOfTrainingSamples)]

  # Train model
  model <- lm(as.formula(paste0(dependent_var, " ~  .")), data = lm_df_cl)
  
  # generate predictions for our held-out testing and training data
  pred_train <- predict(model, train_data)
  pred_test <- predict(model, test_data)
  pred_var_name <- paste0(dependent_var, "_pred")


  # getting the initial data frame with test and train data
  train_df <- lm_df[1:numberOfTrainingSamples, ]
  test_df <- lm_df[-(1:numberOfTrainingSamples), ]

  # get error values
  rmse_train <- sqrt(mean((pred_train - train_labels)^2, na.rm = T))
  mae_train <- mean(abs(pred_train - train_labels), na.rm = T)

  rmse_test <- sqrt(mean((pred_test - test_labels)^2, na.rm = T))
  mae_test <- mean(abs(pred_test - test_labels), na.rm = T)

  if (return_model == F) {
    model <- NA
  } else {
    model <- list(model)
  }
  
  
  
  rsq_diff <- tibble(added_var = character(),
                     rsq = numeric())
  
  lm_df_cl_colnames <- names(lm_df_cl)[names(lm_df_cl) != dependent_var]
  
  # Loop to compute the most relevant variables for the model
  for (x in 1:length(lm_df_cl_colnames)) {
    # Get data with relevant columns for iteration x 
    data_iter <- train_data[, append(lm_df_cl_colnames[1:x], dependent_var)]
    # Get name of new variable in iteration x
    new_var <- tail(append(lm_df_cl_colnames[1:x], dependent_var), 2)[1]
    # Compute model with variables of iteration x
    model_x <- lm(as.formula(paste0(dependent_var, " ~  .")), data = data_iter)
    # Get R2 value of model in iteration x
    rsq <- summary(model_x)$adj.r.squared
    # Add new row to df
    rsq_diff[nrow(rsq_diff) + 1,] <- list(new_var, rsq)
  }
  
  # Compute differences of R2 between each iteration 
  # Arranging df in order to get most relevant variables for the model
  rsq_diff <- rsq_diff %>%
    mutate(rsq_diff = rsq-base::ifelse((is.na(lag(rsq,1))), 0, lag(rsq,1)),
           rsq_diff = ifelse(rsq_diff < 0, 0, rsq_diff)) %>%
    arrange(-rsq_diff) %>%
    select(-rsq)
  
  train_data <- lm_df[1:numberOfTrainingSamples, ] %>%
    select(date, one_of(dependent_var)) %>%
    mutate(pred = pred_train)
  
  test_data <- lm_df[-(1:numberOfTrainingSamples), ] %>%
    select(date, one_of(dependent_var)) %>%
    mutate(pred = pred_test)
  
  # create a result data frame
  result <- tibble(
    Station = station_name,
    stationgroups = station_group,
    dependent_var = dependent_var,
    model_lm = model,
    rmse_train = rmse_train,
    mae_train = mae_train,
    rmse_test = rmse_test,
    mae_test = mae_test,
    train_data = list(train_data),
    test_data = list(test_data),
    var_relevance = list(rsq_diff)
  )
  return(result)
}

```


# Creation of Prediction Models

In the following sections, the CAQI index and the concentrations of respective pollutants are predicted using only weather data and, if applicable, traffic data with linear regression models.

### CAQI-Index - Prediction

Prediction of CAQI index values based on weather and traffic data

```{r caqi_index_prediction}

lm_caqi_index_pred <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "caqi_index", F) %>%
  bind_rows()

```

### NO~2~ - Prediction

Prediction of NO~2~ values based on weather and traffic data

```{r NO2_prediction}

lm_no2_pred <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "NO2", F) %>%
  bind_rows()
```

### O~3~ - Prediction

Prediction of O~3~ values based on weather and traffic data

```{r O3_prediction}

lm_o3_pred <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "O3", F) %>%
  bind_rows()
```


### PM~2.5~ - Prediction

Prediction of PM~2.5~ values based on weather and traffic data

```{r pm25_prediction}

lm_pm25_pred <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "pm25", F) %>%
  bind_rows()
```

### PM~10~ - Prediction

Prediction of PM~10~ values based on weather and traffic data

```{r pm10_prediction}

lm_pm10_pred <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "pm10", F) %>%
  bind_rows()
```


# Creation of Forecast Models

In the following sections, the CAQI index and the concentrations of respective pollutants are forecasted using weather data, if applicable, traffic data and lagged data of the dependent variables with linear regression models.

### CAQI-Index - Forecast

Forecast of CAQI index values based on weather, traffic data and 3h/6h lagged CAQI Index values

```{r caqi_index_forecast}

lm_caqi_index_forecast <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "caqi_index", T) %>%
  bind_rows()

lm_caqi_index_forecast$var_relevance[[11]]
```

### NO~2~ - Forecast

Forecast of NO~2~ values based on weather, traffic data and 3h/6h lagged NO2 values

```{r NO2_forecast}

lm_no2_forecast <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "NO2", T) %>%
  bind_rows()
```

### O~3~ - Forecast

Forecast of O~3~ values based on weather, traffic data and 3h/6h lagged O3 values

```{r O3_forecast}

lm_o3_forecast <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "O3", T) %>%
  bind_rows()
```


### PM~2.5~ - Forecast

Forecast of PM~2.5~ values based on weather, traffic data and 3h/6h lagged PM2.5 values

```{r pm25_forecast}

lm_pm25_forecast <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "pm25", T) %>%
  bind_rows()
```

### PM~10~ - Forecast

Forecast of PM~10~ values based on weather, traffic data and 3h/6h lagged PM10 values

```{r pm10_forecast}

lm_pm10_forecast <- map(.x = airquality_data_by_station$messwerte, .f = create_lm, "pm10", T) %>%
  bind_rows()
```


### Saving Results

Results of the prediction and forecast models are saved for subsequent performance evaluation.

```{r saving_results}

save(list = grep("pred|forecast", names(.GlobalEnv), value = TRUE), file = "mlr_model_results.RData")

```
